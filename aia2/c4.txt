/***************************************************************************
**                                                                        **
**                          Connect-4 Algorithm                           **
**                                                                        **
****************************************************************************
**  Adaptation of a Connect4 program with author's permission.            **
***************************************************************************/

The files "c4.c" and "c4.h" provide the functions necessary to implement a
front-end-independent Connect-4 game.  Multiple board sizes are supported.
It is also possible to specify the number of pieces necessary to connect in
a row in order to win.  Therefore one can play Connect-3, Connect-5, etc.
An efficient tree-searching algorithm (making use of alpha-beta cutoff
decisions) has been implemented to insure that the computer plays as
quickly as possible. 

(Note alpha-beta pruning has been disabled to make it easier to debug your 
 evaluation functions - Stefan Bird)

The file "game.c" is also being distributed, which illustrates how the
Connect-4 functions can be used to construct an implementation of an actual
game. The functions have been designed to be general enough to be used with
any front-end one wishes to design.

The documentation describing each function can be found in the source code
itself, "c4.c".  The comments in these two files should be
explanatory enough.  The sample front-end, "game.c", contains no documentation.



The Algorithm  (not exactly as implemented, but algorithmically equivalent)
-------------

All array indexes are zero-based.

Global variables:

              x = the board width.

              y = the board height.

              n = the number to connect.

       level[2] = the skill level of the computer players, where applicable.

    board[x][y] = the board, where board[i][j] contains the value:
                        0 if player 0 occupies position i,j
                        1 if player 1 occupies position i,j
                        C4_NONE if neither player occupies position i,j.

              z = the number of possible n-in-a-row areas on the board
                  in which a winning connection can be made.  This equals:
                        4*x*y - 3*x*n - 3*y*n + 3*x + 3*y - 4*n + 2*n*n + 2.

                  Each n-in-a-row area on the board in which a winning
                  connection can be made is given a unique number from 0 to
                  z-1.  Each space on the board is told which n-in-a-row
                  areas it is part of.  This is done with the array...

      map[x][y] = an array in which each element is a list specifying, for
                  each corresponding board space, which n-in-a-row areas
                  it is part of.

-----------------------------------------------------------------------------

Upper-level Algorithm:

    set up map[][] array
    set every element in board[][] to C4_NONE
    set every element in stats[][] to 1
    set player to either 0 or 1

    while game is not over
        col = get_desired_col(player)
        drop_piece(player, col)

        if is_winner(player) or is_tie()
            game is over
        endif

        player = 1 - player
    endwhile

-----------------------------------------------------------------------------

get_desired_col(player):
    if player is human
        return number from user interface
    else
        return best_move(player, level[player])
    endif

-----------------------------------------------------------------------------

best_move(player, depth):  /* recursive! */
    minimax search of possible future board states, using alpha-beta
    cutoff techniques to limit unnecessary searches.  Look up these
    techniques in any AI book.  The "goodness" of a board state at any
    point in time, from the point of view of the current player, is equal to
    score(player) - score(1-player), where score(p) = sum of stats[p].

-----------------------------------------------------------------------------

drop_piece(player, col):
    row = row the token will end up in after falling down the column
    board[col][row] = player
    for each element q in map[col][row]
        stats[player][q] = stats[player][q] * 2
        stats[1-player][q] = 0
    endfor

-----------------------------------------------------------------------------

is_winner(player):
    for each element s in stats[player]
        if s = 2^n then return TRUE
    endfor
    return FALSE

-----------------------------------------------------------------------------

is_tie():
    if no element of board[][] is C4_NONE
        return TRUE
    else
        return FALSE
    endif

-----------------------------------------------------------------------------

sample map[x][y] for x = 7, y = 6, and n = 4:

    +---------+---------+---------+---------+---------+---------+---------+
    |20,26,68 |20,21,29,|20,21,22,|20,21,22,|21,22,23,|22,23,41,|23,44,56 |
    |         |67       |32,66    |23,35,53,|38,54    |55       |         |
  5 |         |         |         |65       |         |         |         |
    |         |         |         |         |         |         |         |
    |         |         |         |         |         |         |         |
    +---------+---------+---------+---------+---------+---------+---------+
    |16,25,26,|16,17,28,|16,17,18,|16,17,18,|17,18,19,|18,19,40,|19,43,44,|
    |64       |29,63,68 |31,32,53,|19,34,35,|37,38,50,|41,51,56 |52       |
  4 |         |         |62,67    |49,54,61,|55,65    |         |         |
    |         |         |         |66       |         |         |         |
    |         |         |         |         |         |         |         |
    +---------+---------+---------+---------+---------+---------+---------+
    |12,24,25,|12,13,27,|12,13,14,|12,13,14,|13,14,15,|14,15,39,|15,42,43,|
    |26,60    |28,29,53,|30,31,32,|15,33,34,|36,37,38,|40,41,47,|44,48    |
  3 |         |59,64    |49,54,58,|35,45,50,|46,51,56,|52,65    |         |
    |         |         |63,68    |55,57,62,|61,66    |         |         |
    |         |         |         |67       |         |         |         |
    +---------+---------+---------+---------+---------+---------+---------+
    |8,24,25, |8,9,27,  |8,9,10,  |8,9,10,  |9,10,11, |10,11,39,|11,42,43,|
    |26,53    |28,29,49,|30,31,32,|11,33,34,|36,37,38,|40,41,48,|44,65    |
  2 |         |54,60    |45,50,55,|35,46,51,|47,52,57,|61,66    |         |
    |         |         |59,64    |56,58,63,|62,67    |         |         |
    |         |         |         |68       |         |         |         |
    +---------+---------+---------+---------+---------+---------+---------+
    |4,24,25, |4,5,27,  |4,5,6,30,|4,5,6,7  |5,6,7,36,|6,7,39,  |7,42,43, |
    |49       |28,45,50 |31,46,51,|33,34,47,|37,48,58,|40,57,62 |61       |
  1 |         |         |60       |52,59,64 |63       |         |         |
    |         |         |         |         |         |         |         |
    |         |         |         |         |         |         |         |
    +---------+---------+---------+---------+---------+---------+---------+
    |0,24,45  |0,1,27,  |0,1,2,30,|0,1,2,3, |1,2,3,36,|2,3,39,58|3,42,57  |
    |         |46       |47       |33,48,60 |59       |         |         |
  0 |         |         |         |         |         |         |         |
    |         |         |         |         |         |         |         |
    |         |         |         |         |         |         |         |
    +---------+---------+---------+---------+---------+---------+---------+

         0         1         2         3         4         5         6

 0 - 23: horizontal wins
24 - 44: vertical wins
45 - 56: forward diagonal wins
57 - 68: backward diagonal wins

The last element of each map[x][y] should be -1. For example, map[0][0] would be
[0][24][45][-1]. The -1 tells the rest of the program when to stop reading lines. 

-----------------------------------------------------------------------------

The sample map that I show above is just to show what the map[x][y]
array should look like for a 7x6 board of Connect-4 (even though it's
usually filled in dynamically using a few iterative loops).  The numbers
in this array are labels on the winnable n-in-a-row areas of the board.
This is useful so that when a piece is dropped into an arbitrary board
position, the algorithm can determine very quickly which n-in-a-row
areas have become more likely destined for a win for the player, and, as
importantly, which n-in-a-row areas are no longer possibilities for the
opposing player.  The numbers in the map[x][y] array are indexes into a
pair of parallel single-dimensional arrays which keep track of how likely
each n-in-a-row area is to be the winning area for each player.  

